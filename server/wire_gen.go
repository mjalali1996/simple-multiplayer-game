// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"context"
	"database/sql"
	"github.com/heroiclabs/nakama-common/runtime"
	"simpleServer/environment"
	"simpleServer/matchmaking"
	"simpleServer/matchmaking/room"
	"simpleServer/service"
	userAccount2 "simpleServer/userAccount"
	"simpleServer/userAccount/controllers"
)

// Injectors from wire.go:

func BuildApplicationWire(ctx context.Context, logger runtime.Logger, db *sql.DB, nk runtime.NakamaModule, initializer runtime.Initializer) (*App, error) {
	walletManager := userAccount.NewWalletManager(ctx, nk)
	accountManager := userAccount.NewAccountManager(ctx, nk, walletManager, db, logger)
	accountService := userAccount2.NewService(logger, initializer, accountManager)
	iEnvironment := environment.New(ctx)
	iGameRoom := room.NewGameRoom(ctx, logger, iEnvironment)
	service := matchmaking.NewMatchMakingService(initializer, iGameRoom, walletManager, iEnvironment)
	app, err := NewApp(accountService, service)
	if err != nil {
		return nil, err
	}
	return app, nil
}

// wire.go:

type App struct {
	services []service.IService
}

func NewApp(accountService userAccount2.AccountService, matchMakingService matchmaking.Service) (*App, error) {

	services := make([]service.IService, 0)
	services = append(services, &matchMakingService)
	services = append(services, &accountService)

	return &App{
		services: services,
	}, nil
}
